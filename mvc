import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

// Modelo
class User {
  final int id;
  String name;
  String cpf;
  String rg;
  String idade;

  User({required this.id, required this.name, required this.cpf, required this.rg, required this.idade});
}

// DAO
class UserDAO extends ChangeNotifier {
  List<User> _users = [];
  int _nextId = 1;

  List<User> get users => _users;

  void createUser(String name, String cpf, String rg, String idade) {
    _users.add(User(id: _nextId++, name: name, cpf: cpf, rg: rg, idade: idade));
    notifyListeners();
  }

  void updateUser(int id, String newName, String newCpf, String newRg, String newIdade) {
    User? user = _users.firstWhere((user) => user.id == id);
    if (user != null) {
      user.name = newName;
      user.cpf = newCpf;
      user.rg = newRg;
      user.idade = newIdade;
      notifyListeners();
    }
  }

  void deleteUser(int id) {
    _users.removeWhere((user) => user.id == id);
    notifyListeners();
  }
}

// View
class UserListView extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    final userDAO = Provider.of<UserDAO>(context);

    return Scaffold(
      appBar: AppBar(title: Text("User Management")),
      body: ListView.builder(
        itemCount: userDAO.users.length,
        itemBuilder: (context, index) {
          final user = userDAO.users[index];
          return ListTile(
            title: Text(user.name),
            subtitle: Text(user.cpf),
            trailing: Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                IconButton(
                  icon: Icon(Icons.edit),
                  onPressed: () {
                    _showEditDialog(context, user);
                  },
                ),

                IconButton(
                  icon: Icon(Icons.delete),
                  onPressed: () {
                    userDAO.deleteUser(user.id);
                  },
                ),
              ],
            ),
          );
        },
      ),

      floatingActionButton: FloatingActionButton(
        onPressed: () {
          _showAddDialog(context);
        },
        child: Icon(Icons.add),
      ),
    );
  }

  void _showAddDialog(BuildContext context) {
    String name = '';
    String cpf = '';
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text("Add User"),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextField(
                onChanged: (value) {
                  name = value;
                },
                decoration: InputDecoration(labelText: "User Name"),
              ),
              TextField(
                onChanged: (value) {
                  cpf = value;
                },
                decoration: InputDecoration(labelText: "User CPF"),
              ),
            ],
          ),

          actions: [
            TextButton(
              onPressed: () {
                if (name.isNotEmpty && cpf.isNotEmpty) {
                  Provider.of<UserDAO>(context, listen: false).createUser(name, cpf);
                  Navigator.of(context).pop();
                }
              },
              child: Text("Add"),
            ),
          ],
        );
      },
    );
  }

  void _showEditDialog(BuildContext context, User user) {
    String newName = user.name;
    String newCpf = user.cpf;
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text("Edit User"),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextField(
                onChanged: (value) {
                  newName = value;
                },
                controller: TextEditingController(text: user.name),
                decoration: InputDecoration(labelText: "User Name"),
              ),

              TextField(
                onChanged: (value) {
                  newCpf = value;
                },
                controller: TextEditingController(text: user.cpf),
                decoration: InputDecoration(labelText: "User CPF"),
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () {
                if (newName.isNotEmpty && newCpf.isNotEmpty) {
                  Provider.of<UserDAO>(context, listen: false).updateUser(user.id, newName, newCpf);
                  Navigator.of(context).pop();
                }
              },
              child: Text("Update"),
            ),
          ],
        );
      },
    );
  }
}

// Main
void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return ChangeNotifierProvider(
      create: (_) => UserDAO(),
      child: MaterialApp(
        title: 'MVC Flutter CRUD App',
        home: UserListView(),
      ),
    );
  }
}
